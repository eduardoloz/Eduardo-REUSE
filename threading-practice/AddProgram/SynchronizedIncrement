import java.util.ArrayList;

public class SynchronizedIncrement {
    private static final int NUM_THREADS = 5;  // Number of threads
    private static final int NUM_INCREMENTS = 10;  // Number of increments per thread
    private static int sharedVariable = 0;  // Shared variable to be incremented
    private static final Object lock = new Object();
    private static int currentThreadIndex = 0;

    public static void main(String[] args) {
        ArrayList<Thread> threads = new ArrayList<>();

        for (int i = 0; i < NUM_THREADS; i++) {
            int threadIndex = i;
            Thread thread = new Thread(() -> {
                for (int j = 0; j < NUM_INCREMENTS; j++) {
                    increment(threadIndex);
                }
            });
            threads.add(thread);
            thread.start();
        }

        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Final value of sharedVariable: " + sharedVariable);
    }

    private static void increment(int threadIndex) {
        synchronized (lock) {
            while (threadIndex != currentThreadIndex) {
                try {
                    lock.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            sharedVariable++;
            System.out.println("Thread " + threadIndex + " incremented sharedVariable to " + sharedVariable);
            currentThreadIndex = (currentThreadIndex + 1) % NUM_THREADS;
            lock.notifyAll();
        }
    }
}
